
<% require_javascript(:extjs) %>
<% require_css(:extjs) %>
<%= page_title %>
<%= form_for(@report_type,:url=>{:action=>"update",:format=>:js},:html=>{:id=>"editFields"},:builder => LabellingFormBuilder) do |f| %>
<%= f.hidden_field(:relationship_str,:id=>"relationship_str",:value=>@report_type.relationship_str||@report_type.relationship_to_s) %>
<div id="ep" class="edit-block page-block">
  <div class="pbHeader">
    <table cellpadding="0" cellspacing="0" border="0">
      <tbody>
        <tr>
          <td class="pbTitle"><h2 class="mainTitle"><%=t(:label_irm_report_type_define_field_and_section)%></h2></td>
          <td id="topButtonRow" class="pbButton">
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="pbBody" style="padding:10px;">
            <div class="pbSubsection" width="100%">
                <table>
                  <tr>
                    <th><%= t(:label_irm_report_type_field_selectable_attribute) %></th>
                    <th><%= t(:label_irm_report_type_usable_field_and_section) %></th>
                  </tr>
                  <tr>
                    <td>
                      <div id="sourceTree" href=<%= url_for(:action=>"field_source",:format=>:json) %>></div>
                    </td>
                    <td>
                      <div id="targetTree" href=<%= url_for(:action=>"section_field",:format=>:json) %>></div>
                    </td>
                  </tr>
                </table>
            </div>
  </div>
  <div class="pbBottomButtons">
    <table cellpadding="0" cellspacing="0" border="0">
      <tbody>
        <tr>
          <td class="pbTitle"></td>
          <td id="bottomButtonRow" class="pbButtonb">
            <div class="button"><%= f.submit t(:save)%></div>
            <div class="button"><%= link_back t(:cancel)%></div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
<% end %>
<script>
    var treeNode = Ext.getDom("sourceTree");
    var treeGridNode = Ext.getDom("targetTree");
    Ext.onReady(function() {
        function beforeadd(node, data, overModel,dropPosition,dropFunction,options){
            if(["section","business_object"].indexOf(data.records[0].data.type)>-1){
              if("business_object"== data.records[0].data.type||("section"== data.records[0].data.type&&dropPosition=="append"))
                return false;
              else
                return true;
            }
            else{
                if(overModel.data.type=="section"&&dropPosition!="append")
                    return false;
                else
                  return true;
            }
        }
        function beforedelete(node, data, overModel,dropPosition,dropFunction,options){
            if(["section","business_object"].indexOf(data.records[0].data.type)>-1)
              return false;
            else
            {
                if(data.records[0].data.bo_id == overModel.data.bo_id){
                    if(overModel.data.type=="business_object"&&dropPosition!="append")
                      return false;
                    else
                      return true;
                }
                else{
                    Ext.Msg.alert('Status', 'Please select correct BO.');
                    return false;
                }
            }
        }

        function selectedSection(view, selections, options){
            this.down("#deleteSection").setDisabled(!(selections.length>0&&selections[0].data.type == 'section'));
            this.down("#renameSection").setDisabled(!(selections.length>0&&selections[0].data.type == 'section'));

        }
        function deleteSection(){
            var view = Ext.getCmp("fields").getView();
            var removedNode =  view.getRecord(view.getSelectedNodes()[0]);
            var fieldSourceNodes = Ext.getCmp("fieldSource").getStore().getRootNode().childNodes;
            Ext.each(removedNode.childNodes,function(node){

                Ext.each(fieldSourceNodes,function(bo){
                  if(bo.data.bo_id == node.data.bo_id)
                    bo.appendChild(Ext.create("ReportTypeField",node.data));
                });
            });
            Ext.getCmp("fields").getStore().getRootNode().removeChild(removedNode);

        }
        function addSection(){
            Ext.Msg.prompt('', '<%=t(:label_irm_report_type_section_name)%>:', function(btn, text){
                if (btn == 'ok'&&text!=""){
                    Ext.getCmp("fields").getStore().getRootNode().appendChild(Ext.create("ReportTypeField",{id:null, type: "section", text: text,children:[]}));
                }
            });
        }
        function renameSection(){
            var view = Ext.getCmp("fields").getView();
            var renameNode =  view.getRecord(view.getSelectedNodes()[0]);
            Ext.Msg.prompt('', '<%=t(:label_irm_report_type_section_name)%>:', function(btn, text){
                if (btn == 'ok'&&text!=""&&text!=renameNode.data.text){
                  renameNode.set("text",text);
                }
            },null,null,renameNode.data.text);
        }
        checkedSelectionFlag = function(target){
          var view = Ext.getCmp("fields").getView();
          var checkNode =  view.getRecord(view.getSelectedNodes()[0]);
          checkNode.set("default_selection_flag",target.checked);
        }
        function renderSelectionFlag(value,p,record){
            if(record.data.type!="section"){
              if(record.data.default_selection_flag)
                return "<input type='checkbox' onclick='checkedSelectionFlag(this)'  checked='checked'>"
              else
                return "<input type='checkbox' onclick='checkedSelectionFlag(this)'>"
            }

        }

        Ext.define('ReportTypeField', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'id',type: 'string'},
                {name: 'type',type: 'string'},
                {name: 'text',type: 'string'},
                {name: 'bo_id',type: 'string'},
                {name: 'bo_name',type: 'string'},
                {name: 'boa_id',type: 'string'},
                {name: 'section_id',type: 'string'},
                {name: 'section_field_id',type: 'string'},
                {name: 'default_selection_flag',type: 'bool'}
            ]
        });
        var store = Ext.create('Ext.data.TreeStore', {
            model: "ReportTypeField",
            proxy: {type: 'ajax',url:  treeNode.getAttribute("href")}
        });
        Ext.create('Ext.tree.Panel', {
            id: "fieldSource",
            store: store,
            rootVisible: false,
            renderTo: 'sourceTree',
            width: 200,
            height: 300,
            singleExpand: true,
            viewConfig: {
                  plugins: {
                      ptype: 'treeviewdragdrop'
                  },listeners: {'beforedrop':beforedelete }
            }
        });


        var gridStore = Ext.create('Ext.data.TreeStore', {
            model: "ReportTypeField",
            proxy: {
                type: 'ajax',
                url: treeGridNode.getAttribute("href")
            }
        });

        Ext.create('Ext.tree.Panel', {
            id: "fields",
            width: 500,
            height: 300,
            renderTo: 'targetTree',
            store: gridStore,
            singleExpand: true,
            rootVisible: false,
            columns: [{
                xtype: 'treecolumn',
                text: '<%=t(:label_irm_report_type_section_name)%>',
                flex: 2,
                dataIndex: 'text'
            }, {
                flex: 1,
                renderer: renderSelectionFlag,
                text: '<%=t(:label_irm_report_type_field_default_selection_flag)%>',
                dataIndex: 'default_selection_flag'
            }, {
                flex: 1,
                text: '<%=t(:label_irm_report_type_field_business_object)%>',
                dataIndex: 'bo_name'
            }],
            viewConfig: {
                  plugins: {
                      ptype: 'treeviewdragdrop'
                  },listeners: {'beforedrop':beforeadd }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    items:[{text: '<%=t(:add)%>',itemId:"addSection",handler: addSection},
                           {text: '<%=t(:rename)%>',itemId:"renameSection",disabled: true,handler: renameSection},
                           {text: '<%=t(:delete)%>',itemId:"deleteSection",disabled: true,handler: deleteSection}]
                }
            ],
            listeners:{
                'selectionchange': selectedSection
            }

         });

        function postParams(){
          var sections = [];
          Ext.each(Ext.getCmp("fields").getStore().getRootNode().childNodes,function(section){
              var sectionJ = {id:section.data.id,section_id:section.data.section_id,name:section.data.text,fields:[]}
              Ext.each(section.childNodes,function(field){
                var fieldJ = {section_field_id:field.data.section_field_id,boa_id:field.data.boa_id,default_selection_flag:field.data.default_selection_flag}
                sectionJ.fields.push(fieldJ)
              });
              sections.push(sectionJ);
          });
          return sections;
        }
        Ext.get("editFields").on("submit",function(e){
          e.preventDefault();
          var form = this,
              csrfParam = Ext.query('meta[name=csrf-param]')[0].getAttribute("content"),
			  csrfToken = Ext.query('meta[name=csrf-token]')[0].getAttribute("content");
          params={}
          params["irm_report_type_sections"] =Ext.encode(postParams());
          params[csrfParam] = csrfToken;
          Ext.Ajax.request({
              url: form.getAttribute("action"),
              params: params,
              success: function(response){
                  location.reload(true);
              }
          });
        })
        });
</script>