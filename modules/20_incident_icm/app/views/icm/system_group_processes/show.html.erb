<%= common_title %>
<% require_jscss([:raphael]) %>
<style type="text/css">
    #holder {
        /*top: 250px;*/
        /*left: 250px;*/
        /*right: 0px;*/
        /*bottom: 0px;*/
        /*position: absolute;*/
        /*z-index: 999;*/
        width: 100%;
        height: 100%;
        /*overflow: auto;*/
        /*position: relative;*/
        /*width: auto;*/
        /*overflow: hidden;*/
    }

    .support-group-node {
        display: none;
        /*display: inline-block;*/
    }
    .test {

        /*position: absolute;*/
        /*padding: 5px 10px;*/
        /*width: 100%;*/
        /*min-width: 60px;*/
        /*height: 30px;*/
        /*top: 0px;*/
        /*z-index: 0;*/
        /*display: inline-block;*/
    }
</style>

<!--页面结构-->
<div class="show-block">
  <table class="page-block-header"><tr>
    <td class="page-block-title">
      <h2 class="block-title"></h2>
    </td>
    <td class="page-block-button">
      <%= link_to t(:edit), {:action => "edit", :id => @system_group_process},:class=>"btn"%>
      <%= link_to t(:back), {:action => "index"},:class=>"btn" %>
    </td>
  </tr></table>
  <div class="page-block-body" style="height: 600px;">
    <div id="holder"></div>
    <div class="support-group-node" id="0" data-relations="<%= @relation_hash['0'] %>"><%= t(:label_irm_system_group_process_blank)%></div>
    <% support_group_process_rows(current_system.id).each do |support_group| %>
      <div id="<%= support_group[:support_group_id] %>" data-relations='<%= @relation_hash[support_group[:support_group_id].to_s] %>' class="support-group-node"><%= truncate(support_group[:group_name],{:length => 10})  %></div>
    <% end %>

    <script type="text/javascript">
        $(function () {
            //用来存储节点的顺序
            var connections = [];
            //创建绘图对象
            var r = Raphael("holder", 800, 800);
            //绘制节点
            var nodes = $("div.support-group-node");
            var angle = 0, circles = {};

            var node_index = 0;

            while (angle < 360) {
                var x = Math.sin(Raphael.rad(angle)) * 210;
                var y = Math.cos(Raphael.rad(angle)) * 210;

                var color = Raphael.getColor();
                var transform = "r" + angle + " 320 300";
                var node = $(nodes[node_index]);

                var circle = r.circle(320, 510, 40).attr({stroke: color, fill: color, transform: transform, "fill-opacity": .4});

//                var circle = r.rect(320-x, 300 + y, 60, 40, 4).attr({stroke: color, fill: color, "fill-opacity": .4});
                r.text(320 - x, 300 + y, node.text()).attr({stroke: "#333", fill: color, "fill-opacity": .4});

                circles[node.attr("id")] = circle;

                angle += 360/nodes.length;
                node_index += 1;
            }

            for(var i= 0, ii = nodes.length; i< ii; i++){
                var node = $(nodes[i]);
                var relations = eval(node.data("relations"));
                if(relations && relations.length > 0) {
                    for(var j = 0; j < relations.length; j++) {
                        r.drawArr({ obj1: circles[node.attr("id")], obj2:circles[relations[j]] })
                    }
                }
            }

        });

        Raphael.fn.drawArr = function (obj) {
            var point = getStartEnd(obj.obj1, obj.obj2);
            var path1 = getArr(point.start.x, point.start.y, point.end.x, point.end.y, 10);
            if (obj.arrPath) {
                obj.arrPath.attr({ path:path1,stroke: "#808080", fill: "none", "stroke-width": 2,"fill-opacity": 0.3 });
            } else {
                obj.arrPath = this.path(path1).attr({stroke: "#808080", fill: "none", "stroke-width": 2, "fill-opacity": 0.3});
            }
            return obj;
        };
        function getStartEnd(obj1, obj2) {
            var bb1 = obj1.getBBox(),
                    bb2 = obj2.getBBox();
            var p = [
                { x:bb1.x + bb1.width / 2, y:bb1.y - 1 },
                { x:bb1.x + bb1.width / 2, y:bb1.y + bb1.height + 1 },
                { x:bb1.x - 1, y:bb1.y + bb1.height / 2 },
                { x:bb1.x + bb1.width + 1, y:bb1.y + bb1.height / 2 },
                { x:bb2.x + bb2.width / 2, y:bb2.y - 1 },
                { x:bb2.x + bb2.width / 2, y:bb2.y + bb2.height + 1 },
                { x:bb2.x - 1, y:bb2.y + bb2.height / 2 },
                { x:bb2.x + bb2.width + 1, y:bb2.y + bb2.height / 2 }
            ];
            var d = {}, dis = [];
            for (var i = 0; i < 4; i++) {
                for (var j = 4; j < 8; j++) {
                    var dx = Math.abs(p[i].x - p[j].x),
                            dy = Math.abs(p[i].y - p[j].y);
                    if (
                            (i == j - 4) ||
                                    (((i != 3 && j != 6) || p[i].x < p[j].x) &&
                                            ((i != 2 && j != 7) || p[i].x > p[j].x) &&
                                            ((i != 0 && j != 5) || p[i].y > p[j].y) &&
                                            ((i != 1 && j != 4) || p[i].y < p[j].y))
                            ) {
                        dis.push(dx + dy);
                        d[dis[dis.length - 1]] = [i, j];
                    }
                }
            }
            if (dis.length == 0) {
                var res = [0, 4];
            } else {
                res = d[Math.min.apply(Math, dis)];
            }
            var result = {};
            result.start = {};
            result.end = {};
            result.start.x = p[res[0]].x;
            result.start.y = p[res[0]].y;
            result.end.x = p[res[1]].x;
            result.end.y = p[res[1]].y;
            return result;
        }
        //获取组成箭头的三条线段的路径
        function getArr(x1, y1, x2, y2, size) {
            var angle = Raphael.angle(x1, y1, x2, y2);//得到两点之间的角度
            var a45 = Raphael.rad(angle - 45);//角度转换成弧度
            var a45m = Raphael.rad(angle + 45);
            var x2a = x2 + Math.cos(a45) * size;
            var y2a = y2 + Math.sin(a45) * size;
            var x2b = x2 + Math.cos(a45m) * size;
            var y2b = y2 + Math.sin(a45m) * size;
            var result = ["M", x1, y1, "L", x2, y2, "L", x2a, y2a, "M", x2, y2, "L", x2b, y2b];
            return result;
        }


    </script>
  </div>
</div>
